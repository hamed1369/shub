<?php
/**
 * User: Issa Moradnejad
 * Date: 2016/06/01
 */

class groupsTest extends IISTestUtilites
{
    private $TEST_USER1_NAME = "user1";
    private $TEST_USER2_NAME = "user2";
    private $TEST_USER3_NAME = "user3";
    private $TEST_PASSWORD = '12345';

    private $userService;
    private $user1,$user2,$user3;
    private $group1,$group2,$group3;

    private function echoText($text, $bounding_box=false)
    {
        if ($bounding_box) {
            echo "-----------------------------ISSA------------------------------------\n";
            echo "$text\n";
            echo "---------------------------------------------------------------------\n";
        }else
            echo "==========ISSA:==>$text\n";
    }
    private function hide_element($className){
        try {
            $this->execute(array(
                'script' => "document.getElementsByClassName('" . $className . "')[0].style.visibility = 'hidden';",
                'args' => array()
            ));
        }catch(Exception $ex){}
    }
    public function createGroup($userID, $title,$desc,$whoCanView,$whoCanInvite)
    {
        $groupDto = new GROUPS_BOL_Group();
        $groupDto->timeStamp = time();
        $groupDto->userId = $userID;
        //print_r($groupDto);

        $data = array();
        foreach ( $groupDto as $key => $value )
        {
            $data[$key] = $value;
        }

        $event = new OW_Event(GROUPS_BOL_Service::EVENT_BEFORE_CREATE, array('groupId' => $groupDto->id), $data);
        OW::getEventManager()->trigger($event);
        $data = $event->getData();

        foreach ( $data as $k => $v )
        {
            $groupDto->$k = $v;
        }

        //$group = $this->processGroup($groupDto);
        $group = $groupDto;
        $service = GROUPS_BOL_Service::getInstance();
        $group->title = $title;
        $group->description = $desc;
        $group->whoCanInvite = $whoCanInvite;
        $group->whoCanView = $whoCanView;
        $service->saveGroup($group);


        $is_forum_connected = OW::getConfig()->getValue('groups', 'is_forum_connected');
        // Add forum group
        if ( $is_forum_connected )
        {
            $event = new OW_Event('forum.create_group', array('entity' => 'groups', 'name' => $group->title, 'description' => $group->description, 'entityId' => $group->getId()));
            OW::getEventManager()->trigger($event);
        }

        if ( $group )
        {
            $event = new OW_Event(GROUPS_BOL_Service::EVENT_CREATE, array('groupId' => $group->id));
            OW::getEventManager()->trigger($event);
        }

        $group = GROUPS_BOL_Service::getInstance()->findGroupById($group->id);

        if ( $group->status == GROUPS_BOL_Group::STATUS_ACTIVE )
        {
            BOL_AuthorizationService::getInstance()->trackAction('groups', 'create');
        }

        return $group;
    }

    protected function setUp()
    {
        $this->setBrowser('firefox');
        $this->setBrowserUrl(OW_URL_HOME);
        $this->userService = BOL_UserService::getInstance();
        $accountType = BOL_QuestionService::getInstance()->getDefaultAccountType()->name;
        IISSecurityProvider::createUser($this->TEST_USER1_NAME,"user1@gmail.com",$this->TEST_PASSWORD,"1987/3/21","1",$accountType);
        IISSecurityProvider::createUser($this->TEST_USER2_NAME,"user2@gmail.com",$this->TEST_PASSWORD,"1987/3/21","1",$accountType);
        IISSecurityProvider::createUser($this->TEST_USER3_NAME,"user3@gmail.com",$this->TEST_PASSWORD,"1987/3/21","1",$accountType);
        $this->user1 = BOL_UserService::getInstance()->findByUsername($this->TEST_USER1_NAME);
        $this->user2 = BOL_UserService::getInstance()->findByUsername($this->TEST_USER2_NAME);
        $this->user3 = BOL_UserService::getInstance()->findByUsername($this->TEST_USER3_NAME);
        // set some info to users

        $friendsQuestionService = FRIENDS_BOL_Service::getInstance();
        $friendsQuestionService->request($this->user1->getId(),$this->user2->getId());
        $friendsQuestionService->accept($this->user2->getId(),$this->user1->getId());

        $this->group1 = $this->createGroup($this->user1->getId(), 'g1','desc1','anyone','creator');
        $this->group2 = $this->createGroup($this->user1->getId(), 'g2','desc2','anyone','participant');
        $this->group3 = $this->createGroup($this->user1->getId(), 'g3','desc3','invite','participant');
        GROUPS_BOL_Service::getInstance()->inviteUser($this->group3->id,$this->user3->getId(),$this->user1->getId());
    }

    public function setUpPage()
    {
        parent::setUpPage(); // TODO: Change the autogenerated stub
        $this->timeouts()->implicitWait(15000);
    }

    public function testGroups1()
    {
        //----SCENARIO 1
        //User1 create GROUP1 : everyone can join, only user1 can invite
        //User2 joins, Can't invite, can post
        //User3 not Joins, can join, can't post

        //----SCENARIO 2
        //User1 create GROUP2 : everyone can join and invite
        //User2 Joins, Can invite, can post

        //----SCENARIO 3
        //User1 create GROUP3 : join with invite link, invites user3
        //User2 can't join
        //User3 joins  

        $test_caption = "groupsTest-testGroups1";
        //$this->echoText($test_caption);
        $CURRENT_SESSIONS = $this->prepareSession();
        $CURRENT_SESSIONS->currentWindow()->maximize();

        $this->url(OW_URL_HOME . "dashboard");
        $sessionId = $CURRENT_SESSIONS->cookie()->get(OW_Session::getInstance()->getName());
        $sessionId = str_replace('%2C', ',', $sessionId);
        //----------USER2
        $this->sign_in($this->user2->getUsername(),$this->TEST_PASSWORD,true,true,$sessionId);
        try {
            $this->url(OW_URL_HOME . 'groups/'.$this->group1->id.'/join');
            $this->hide_element('demo-nav');
            $res = $this->checkIfXPathExists('//*[@name="status"]');
            $this->assertTrue($res);
            $res = $this->checkIfXPathExists('//*[@id="GROUPS_InviteLink"]');
            $this->assertTrue(!$res);

            $this->url(OW_URL_HOME . 'groups/'.$this->group2->id.'/join');
            $this->hide_element('demo-nav');
            sleep(1);
            $this->byName('status')->value($test_caption);
            $this->byName('save')->click();
            $res = $this->checkIfXPathExists('//*[@id="GROUPS_InviteLink"]');
            $this->assertTrue($res);
            sleep(1);

            $this->url(OW_URL_HOME . 'groups/'.$this->group3->id.'/join');
            $this->hide_element('demo-nav');
            $res = $this->checkIfXPathExists('//*[@name="status"]');
            $this->assertTrue(!$res);

            sleep(1);
            $this->url('sign-out');
        } catch (Exception $ex) {
            $this->echoText($ex, true);
            if (getenv("SNAPSHOT_DIR"))
                file_put_contents(getenv("SNAPSHOT_DIR") . $test_caption . '.png', $this->currentScreenshot());
            $this->assertTrue(false);
        }

        //----------USER3
        $this->sign_in($this->user3->getUsername(),$this->TEST_PASSWORD,true,true,$sessionId);
        try {
            $this->url(OW_URL_HOME . 'groups/'.$this->group1->id);
            $this->hide_element('demo-nav');
            $res = $this->checkIfXPathExists("//*[contains(@class, 'ow_ic_info')]");
            $this->assertTrue($res);
            $res = $this->checkIfXPathExists('//*[@name="status"]');
            $this->assertTrue(!$res);
            sleep(1);

            $this->url(OW_URL_HOME . 'groups/'.$this->group3->id.'/join');
            $this->hide_element('demo-nav');
            $res = $this->checkIfXPathExists('//*[@name="status"]');
            $this->assertTrue($res);

        } catch (Exception $ex) {
            $this->echoText($ex, true);
            if (getenv("SNAPSHOT_DIR"))
                file_put_contents(getenv("SNAPSHOT_DIR") . $test_caption . '.png', $this->currentScreenshot());
            $this->assertTrue(false);
        }
    }


    public function tearDown()
    {
        //delete Groups
        $groupDto = GROUPS_BOL_Service::getInstance();
        $groupDto->deleteGroup($this->group1->id);
        $groupDto->deleteGroup($this->group2->id);
        $groupDto->deleteGroup($this->group3->id);

        //delete users
        $questionDao = BOL_QuestionService::getInstance();
        $userDao = BOL_UserDao::getInstance();
        $friendsQuestionService = FRIENDS_BOL_Service::getInstance();

        $friendsQuestionService->deleteUserFriendships($this->user1->getId());
        $questionDao->deleteQuestionDataByUserId($this->user1->getId());
        $userDao->deleteById($this->user1->getId());

        $questionDao->deleteQuestionDataByUserId($this->user2->getId());
        $userDao->deleteById($this->user2->getId());

        $questionDao->deleteQuestionDataByUserId($this->user3->getId());
        $userDao->deleteById($this->user3->getId());
    }
}