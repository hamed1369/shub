<?php

class iisAllUsersPasswordInvalidTest extends IISTestUtilites
{
    private $TEST_USERNAME = 'adminForLoginTest';
    private $TEST_EMAIL = 'admin@gmail.com';
    private $TEST_CORRECT_PASSWORD = 'asdf@1111';
    private $userService;
    private $user;

    private $questionService;
    private $question;

    protected function setUp()
    {
        $accountType = BOL_QuestionService::getInstance()->getDefaultAccountType()->name;
        IISSecurityProvider::createUser($this->TEST_USERNAME,$this->TEST_EMAIL,$this->TEST_CORRECT_PASSWORD,"1987/3/21","1",$accountType);
        $this->user = BOL_UserService::getInstance()->findByUsername($this->TEST_USERNAME);

        $this->setBrowser('firefox');
        $this->setBrowserUrl(OW_URL_HOME);
    }
    public function setUpPage()
    {
        parent::setUpPage(); // TODO: Change the autogenerated stub
        $this->timeouts()->implicitWait(15000);
    }

    public function testAllUsersPasswordInvalid()
    {
        $CURRENT_SESSIONS = $this->prepareSession();
        $CURRENT_SESSIONS->currentWindow()->maximize();
        $this->url(OW_URL_HOME . "dashboard");

        $sessionId = $CURRENT_SESSIONS->cookie()->get(OW_Session::getInstance()->getName());
        $sessionId = str_replace('%2C', ',', $sessionId); // took 2 hours to detect  '/^[-,a-zA-Z0-9]{1,128}$/'
        $this->sign_in($this->user->getUsername(),$this->TEST_CORRECT_PASSWORD,true,true,$sessionId);

        srand(mktime());
        $number = rand();
        try{
            //$this->waitUntilElementLoaded('byClassName','ow_message_node');
            $service = IISPASSWORDCHANGEINTERVAL_BOL_Service::getInstance();
            $service->setAllUsersPasswordInvalid(false);
            try{
                $backupTable = OW::getDbo()->queryForRow('show tables like :tableName', array('tableName' => 'ow_iispasswordchangeinterval_password_validation'));
                if (!empty($backupTable)) {
                    $queryForGetData = "select token from `ow_iispasswordchangeinterval_password_validation` where username ='".$this->user->getUsername()."'";
                    $data = OW::getDbo()->queryForRow($queryForGetData);
                    if($data)
                    {
                        $url =  "iispasswordchangeinterval/changeuserpassword/".$data['token'];
                        sleep(5);
                        $this->execute(array(
                            'script' => 'window.location.replace('.'"'.$url.'"'.');',
                            'args'   => array()
                        ));
                    }
                    $this->waitUntilElementLoaded('byName','password');
                    $this->byName('password')->value('selenium test'.$number);
                    $this->byName('repeatPassword')->value('selenium test'.$number);
                    $this->byName('submit')->submit();
                    $this->assertTrue(true);
                }
                else
                {
                    $this->assertTrue(false);
                }
            }catch (Exception $ex){
                echo "____________________________________________________________________";
                echo $ex;
                echo "____________________________________________________________________";
                $this->assertTrue(false);
            }

            $this->assertTrue(true);

        }catch (Exception $ex){
            echo $ex;
            $this->assertTrue(false);
        }
    }

    public function deleteUserFromPassChangedTable()
    {
        try{
            $backupTable = OW::getDbo()->queryForRow('show tables like :tableName', array('tableName' => 'ow_iispasswordchangeinterval_password_validation'));
            if (!empty($backupTable)) {
                $queryForGetData = "delete  from `ow_iispasswordchangeinterval_password_validation` where username ='".$this->user->getUsername()."'";
                $data = OW::getDbo()->queryForRow($queryForGetData);
            }
        }catch (Exception $ex) {
            return null;
        }
    }
    public function tearDown()
    {
        $this->deleteUserFromPassChangedTable();
        $questionDao = BOL_QuestionService::getInstance();
        $questionDao->deleteQuestionDataByUserId($this->user->getId());
        $userDao = BOL_UserDao::getInstance();
        $userDao->deleteById($this->user->getId());
    }
}