<?php

class iisBlockIPTest extends IISTestUtilites
{
    private $TEST_USERNAME = 'adminForLoginTest';
    private $TEST_EMAIL = 'admin@gmail.com';
    private $TEST_CORRECT_PASSWORD = 'asdf@1111';
    private $TEST_WRONG_PASSWORD = '123';

    private $userService;
    private $user;

    private $questionService;
    private $question;

    protected function setUp()
    {
        $this->setBrowser('firefox');
        $this->setBrowserUrl(OW_URL_HOME);
        $accountType = BOL_QuestionService::getInstance()->getDefaultAccountType()->name;
        IISSecurityProvider::createUser($this->TEST_USERNAME,$this->TEST_EMAIL,$this->TEST_CORRECT_PASSWORD,"1987/3/21","1",$accountType);
        $this->user = BOL_UserService::getInstance()->findByUsername($this->TEST_USERNAME);

    }
    public function setUpPage()
    {
        parent::setUpPage(); // TODO: Change the autogenerated stub
        $this->timeouts()->implicitWait(15000);
    }

    public function testBlockIP()
    {
        $this->prepareSession()->currentWindow()->maximize();
        $config =  OW::getConfig();
        $config->saveConfig('iisblockingip', 'try_count_block', 3);
        $config->saveConfig('iisblockingip', 'block', 1);
        $config->saveConfig('iisblockingip', 'try_count_captcha', 1);
        $config->saveConfig('iisblockingip', 'expire_time', 1);
        $this->prepareSession()->currentWindow()->maximize();
        $this->url(OW_URL_HOME.'sign-in');
        //$this->byClassName('ow_signin_label')->click();
        $this->byName('identity')->clear();
        $this->byName('identity')->value($this->TEST_USERNAME);
        $this->byName('password')->clear();
        $this->byName('password')->value($this->TEST_WRONG_PASSWORD);
        $this->byName('sign-in')->submit();
        srand(mktime());
        $number = rand();
        sleep(5);
        try{
            $this->waitUntilElementLoaded('byName','captchaField');
            $this->byName('identity')->clear();
            $this->byName('password')->clear();
            $this->byName('identity')->value($this->TEST_USERNAME);
        $this->byName('password')->clear();
            $this->byName('password')->value($this->TEST_WRONG_PASSWORD);
            $this->byName('captchaField')->value('12hsd');
            $this->byName('sign-in')->submit();
            sleep(5);
            $this->byName('identity')->clear();
            $this->byName('password')->clear();
            $this->byName('captchaField')->clear();
            $this->byName('identity')->value($this->TEST_USERNAME);
            $this->byName('password')->value($this->TEST_WRONG_PASSWORD);
            $this->byName('captchaField')->value('12hsd');
            $this->byName('sign-in')->submit();
            sleep(5);
            $this->byName('identity')->clear();
            $this->byName('password')->clear();
            $this->byName('captchaField')->clear();
            $this->byName('identity')->value($this->TEST_USERNAME);
            $this->byName('password')->value($this->TEST_WRONG_PASSWORD);
            $this->byName('captchaField')->value('12hsd');
            $this->byName('sign-in')->submit();
            sleep(70);
        $url =  OW_URL_HOME.'dashboard';
        $this->execute(array(
            'script' => 'window.location.replace('.'"'.$url.'"'.');',
            'args'   => array()
        ));
       // $this->waitUntilElementLoaded('byClassName','ow_signin_label');
        //$this->byClassName('ow_signin_label')->click();
            $this->waitUntilElementLoaded('byName','identity');
            $CURRENT_SESSIONS = $this->prepareSession();
            $CURRENT_SESSIONS->currentWindow()->maximize();

            $sessionId = $CURRENT_SESSIONS->cookie()->get(OW_Session::getInstance()->getName());
            $sessionId = str_replace('%2C', ',', $sessionId); // took 2 hours to detect  '/^[-,a-zA-Z0-9]{1,128}$/'
            $this->sign_in($this->user->getUsername(),$this->TEST_CORRECT_PASSWORD,true,true,$sessionId);
            $this->assertTrue(true);
        sleep(5);
            }catch (Exception $ex) {
            echo "____________________________________________________________________";
            echo $ex;
            echo "____________________________________________________________________";
            $this->assertTrue(false);
        }
        $this->assertTrue(true);
    }

    public function tearDown()
    {
        $questionDao = BOL_QuestionService::getInstance();
        $questionDao->deleteQuestionDataByUserId($this->user->getId());
        $userDao = BOL_UserDao::getInstance();
        $userDao->deleteById($this->user->getId());
    }
}