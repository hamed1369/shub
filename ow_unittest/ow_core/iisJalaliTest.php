<?php

class iisJalaliTest extends IISTestUtilites
{
    private $TEST_USERNAME = 'adminForLoginTest';
    private $TEST_EMAIL = 'admin@gmail.com';
    private $TEST_CORRECT_PASSWORD = 'asdf@1111';
    private $userService;
    private $user;

    private $questionService;
    private $question;

    protected function setUp()
    {
        $this->setBrowser('firefox');
        $this->setBrowserUrl(OW_URL_HOME);
        $accountType = BOL_QuestionService::getInstance()->getDefaultAccountType()->name;
        IISSecurityProvider::createUser($this->TEST_USERNAME,$this->TEST_EMAIL,$this->TEST_CORRECT_PASSWORD,"1987/3/21","1",$accountType);
        $this->user = BOL_UserService::getInstance()->findByUsername($this->TEST_USERNAME);

    }
    public function setUpPage()
    {
        parent::setUpPage(); // TODO: Change the autogenerated stub
        $this->timeouts()->implicitWait(15000);
    }

    public function testEventJalaliCalender()
    {

        $months = array	(OW::getLanguage()->text('iisjalali', 'date_time_month_short_fa_1'),OW::getLanguage()->text('iisjalali', 'date_time_month_short_fa_2')
        ,OW::getLanguage()->text('iisjalali', 'date_time_month_short_fa_3'),OW::getLanguage()->text('iisjalali', 'date_time_month_short_fa_4')
        ,OW::getLanguage()->text('iisjalali', 'date_time_month_short_fa_5'),OW::getLanguage()->text('iisjalali', 'date_time_month_short_fa_6')
        ,OW::getLanguage()->text('iisjalali', 'date_time_month_short_fa_7'),OW::getLanguage()->text('iisjalali', 'date_time_month_short_fa_8')
        ,OW::getLanguage()->text('iisjalali', 'date_time_month_short_fa_9'),OW::getLanguage()->text('iisjalali', 'date_time_month_short_fa_10')
        ,OW::getLanguage()->text('iisjalali', 'date_time_month_short_fa_11'),OW::getLanguage()->text('iisjalali', 'date_time_month_short_fa_12'));
        $CURRENT_SESSIONS = $this->prepareSession();
        $CURRENT_SESSIONS->currentWindow()->maximize();
        $this->url(OW_URL_HOME . "dashboard");

        $sessionId = $CURRENT_SESSIONS->cookie()->get(OW_Session::getInstance()->getName());
        $sessionId = str_replace('%2C', ',', $sessionId); // took 2 hours to detect  '/^[-,a-zA-Z0-9]{1,128}$/'
        $this->sign_in($this->user->getUsername(),$this->TEST_CORRECT_PASSWORD,true,true,$sessionId);
        srand(mktime());
        $number = rand();
        try{
            try{
                $this->waitUntilElementLoaded('byName','status');
                $url =  "events";
                $this->execute(array(
                    'script' => 'window.location.replace('.'"'.$url.'"'.');',
                    'args'   => array()
                ));
                $this->waitUntilElementLoaded('byCssSelector','.ow_button');
                $this->byCssSelector('.ow_button')->click();

                $this->waitUntilElementLoaded('byName','title');
                $this->execute(array(
                    'script' => "var iframeText = document.getElementsByClassName(\"cke_wysiwyg_frame cke_reset\")[0]; if(iframeText!=null) { var conDocument = iframeText.contentDocument;conDocument.body.innerHTML = \"salam\";} else { var iframeText = document.getElementsByName(\"desc\")[0]; iframeText.style.display=\"block\"; iframeText.innerText=\"salam\";} document.getElementsByName('who_can_view')[0].checked =true;document.getElementsByName('who_can_invite')[0].checked =true;",
                    'args'   => array()
                ));
                $this->byName('title')->value('selenium event title'.$number);
                $this->byName('location')->value('selenium event location'.$number);
                $this->byName('submit')->submit();
                $this->byCssSelector('.ow_ic_comment')->click();
                foreach ($months as $month) {
                    if (strpos($this->byCssSelector('.ow_value')->text(), $month) !== false) {
                        $this->assertTrue(true);
                    }
                }
            }catch (Exception $ex){
                echo "____________________________________________________________________";
                echo $ex;
                echo "____________________________________________________________________";
                $this->assertTrue(false);
            }

            $this->assertTrue(true);

        }catch (Exception $ex){
            echo $ex;
            $this->assertTrue(false);
        }
    }


    public function tearDown()
    {
        EVENT_BOL_EventService::getInstance()->deleteUserEvents($this->user->getId());
        $questionDao = BOL_QuestionService::getInstance();
        $questionDao->deleteQuestionDataByUserId($this->user->getId());
        $userDao = BOL_UserDao::getInstance();
        $userDao->deleteById($this->user->getId());
    }
}