<?php
/**
 * User: Issa Moradnejad
 * Date: 2016/05/14
 */

class signUpTest extends IISTestUtilites
{
    private $TEST_USERNAME = 'adminForTest';
    private $TEST_EMAIL = 'adminSignUp@gmail.com';
    private $TEST_PASSWORD = 'passFor123';
    private $TEST_PASSWORD_REPEAT = 'passFor123';
    private $TEST_FULL_NAME = 'Admin Istrator';
    private $TEST_MALE = true;
    private $TEST_DOB_ADULT = ['4','2','1346'];

    private $TEST_KIDS_AGE = 30;
    private $TEST_DOB_MINOR = ['5','3','1370'];
    private $TEST_PARENT_EMAIL = 'planned@parenthood.com';
    private $SMTP_CONFIG;

    private $KIDS_AGE_BEFORE;
    private $CURRENT_SESSIONS;


    private function echoText($text, $bounding_box=false)
    {
        if ($bounding_box) {
            echo "-----------------------------ISSA------------------------------------\n";
            echo "$text\n";
            echo "---------------------------------------------------------------------\n";
        }else
            echo "==========ISSA:==>$text\n";
    }
    private function hide_element($className){
        try {
            $this->execute(array(
                'script' => "document.getElementsByClassName('" . $className . "')[0].style.visibility = 'hidden';",
                'args' => array()
            ));
        }catch(Exception $ex){}
    }
    protected function setUp()
    {
        $this->setBrowser('firefox');
        $this->setBrowserUrl(OW_URL_HOME);


        //remove the user if exists from db
        $userDao = BOL_UserDao::getInstance();
        $user = $userDao->findByUserName($this->TEST_USERNAME);
        if($user!=null) {
            $questionDao = BOL_QuestionService::getInstance();
            $questionDao->deleteQuestionDataByUserId($user->getId());
            $userDao->deleteById($user->getId());
        }

        //set kids min age
        $config =  OW::getConfig();
        $this->KIDS_AGE_BEFORE = $config->getValue('iiscontrolkids', 'kidsAge');
        $config->saveConfig('iiscontrolkids', 'kidsAge', $this->TEST_KIDS_AGE);
        $this->SMTP_CONFIG = $config->getValue('base','mail_smtp_enabled');
        $config->saveConfig('base', 'mail_smtp_enabled', true);
    }

    public function setUpPage()
    {
        parent::setUpPage(); // TODO: Change the autogenerated stub
        $this->timeouts()->implicitWait(15000);
    }

    public function testSignUpSuccessForAdultUser()
    {
        if(true) {
            $test_caption = "signUpTest-testSignUpSuccessForAdultUser";
            //$this->echoText($test_caption);
            $this->CURRENT_SESSIONS = $this->prepareSession();
            $this->CURRENT_SESSIONS->currentWindow()->maximize();
            $this->url('join');

            try {
                $this->fillSignUpForm($this->TEST_USERNAME, $this->TEST_EMAIL, $this->TEST_PASSWORD,
                    $this->TEST_PASSWORD_REPEAT, $this->TEST_FULL_NAME, $this->TEST_MALE, $this->TEST_DOB_ADULT);
                //if (getenv("SNAPSHOT_DIR"))file_put_contents(getenv("SNAPSHOT_DIR") . $test_caption . '_1.png', $this->currentScreenshot());
                //------------------SUBMIT-----------
                $this->byName('joinForm')->submit();
                try {
                    $this->waitUntilElementLoaded('byCssSelector', '.ow_message_node.info');
                    return;
                } catch (Exception $ex) {
                    $this->echoText($ex, true);
                    if (getenv("SNAPSHOT_DIR"))
                        file_put_contents(getenv("SNAPSHOT_DIR") . $test_caption . '.png', $this->currentScreenshot());
                    $this->assertTrue(false);
                }

            } catch (Exception $ex) {
                $this->echoText($ex, true);
                if (getenv("SNAPSHOT_DIR"))
                    file_put_contents(getenv("SNAPSHOT_DIR") . $test_caption . '.png', $this->currentScreenshot());
                $this->assertTrue(false);
            }
        }
    }


    public function testSignUpSuccessForMinorUser()
    {
        //$resp = OW::getDbo()->queryForList(" SELECT  `id`,  `recipientEmail` FROM ".OW_DB_PREFIX . "base_mail");print_r($resp);
        if(1==0) {
            $test_caption = "signUpTest-testSignUpSuccessForMinorUser";
            //$this->echoText($test_caption);
            $this->CURRENT_SESSIONS = $this->prepareSession();
            $this->CURRENT_SESSIONS->currentWindow()->maximize();
            $this->url('join');

            try {
                $this->fillSignUpForm($this->TEST_USERNAME, $this->TEST_EMAIL, $this->TEST_PASSWORD,
                    $this->TEST_PASSWORD_REPEAT, $this->TEST_FULL_NAME, $this->TEST_MALE, $this->TEST_DOB_MINOR);
                //if (getenv("SNAPSHOT_DIR"))file_put_contents(getenv("SNAPSHOT_DIR") . $test_caption . '_1.png', $this->currentScreenshot());
                sleep(1);
                $parentMailTr = $this->byCssSelector('.ow_tr_last.parent_email');
                if ($parentMailTr->displayed()) {
                    $parentMail = $parentMailTr->byName('parentEmail');
                    $parentMail->value($this->TEST_PARENT_EMAIL);

                    //------------------SUBMIT-----------
                    $this->byName('joinForm')->submit();
                    //if (getenv("SNAPSHOT_DIR"))file_put_contents(getenv("SNAPSHOT_DIR") . $test_caption . '_1.png', $this->currentScreenshot());
                    sleep(3);
                    try {
                        //-----------------CHECK IF MAIL WAS SENT
                        $mailDao = BOL_MailDao::getInstance();
                        $sendExample = new OW_Example();
                        $sendExample->andFieldEqual("recipientEmail", $this->TEST_PARENT_EMAIL);
                        $res = $mailDao->findIdByExample($sendExample);

                        if (count($res) == 0) {
                            $this->echoText('nothing with mailDao');
                            $resp = OW::getDbo()->queryForList(" SELECT  `id`,  `recipientEmail` FROM ".OW_DB_PREFIX . "base_mail WHERE `recipientEmail` LIKE '".$this->TEST_PARENT_EMAIL."';");
                            if(count($resp) == 0){
                                $this->echoText('nothing with query for base_mail.');
                                echo OW_DB_PREFIX . "base_mail:";
                                $resp = OW::getDbo()->queryForList(" SELECT  `id`,  `recipientEmail` FROM ".OW_DB_PREFIX . "base_mail");
                                print_r($resp);

                                //abbasloo
                                $resp = OW::getDbo()->queryForList(" SELECT  `id`,  `recipientEmail` FROM iisbckp_".OW_DB_PREFIX . "base_mail WHERE `recipientEmail` LIKE '".$this->TEST_PARENT_EMAIL."';");
                                if(count($resp) == 0) {
                                    $this->echoText('nothing with query for iisbackup.');
                                    echo "iisbckp_".OW_DB_PREFIX . "base_mail:";
                                    $resp = OW::getDbo()->queryForList(" SELECT  `id`,  `recipientEmail` FROM iisbckp_".OW_DB_PREFIX . "base_mail");
                                    print_r($resp);
                                    $this->assertTrue(false);
                                }
                            }
                        }
                        $mailDao->deleteByRecipientEmail($this->TEST_PARENT_EMAIL);
                        return;
                    } catch (Exception $ex) {
                        $this->echoText($ex, true);
                        if (getenv("SNAPSHOT_DIR"))
                            file_put_contents(getenv("SNAPSHOT_DIR") . $test_caption . '_MAIL.png', $this->currentScreenshot());
                        $this->assertTrue(false);
                    }
                } else {
                    $this->assertTrue(false);
                }

            } catch (Exception $ex) {
                $this->echoText($ex, true);
                if (getenv("SNAPSHOT_DIR"))
                    file_put_contents(getenv("SNAPSHOT_DIR") . $test_caption . '.png', $this->currentScreenshot());
                $this->assertTrue(false);
            }
        }
    }


    private function fillSignUpForm($username, $email, $pass, $repeat_pass, $real_name, $is_male, $dob){

        $this->hide_element('demo-nav');
        $joinForm = $this->byId("joinForm");

        //------------------USERNAME-----------
        $i = 1;
        while($i<10){
            $tmp2 = '(//*[contains(@class, "ow_username_validator")])['.$i.']';
            $tmp = $joinForm->byXPath($tmp2);
            if($tmp->displayed()) {
                $tmp->value($username);
                break;
            }
            $i++;
        }
        //------------------EMAIL, PASSWORDS-----------
        $joinForm->byClassName('ow_email_validator')->value($email);
        //$this->scroll_byName($this,'password');
        $joinForm->byName('password')->value($pass);
        $joinForm->byName('repeatPassword')->value($repeat_pass);

        //------------------REAL NAME-----------
        $tmp2 = '//tr[td[2]/input[@name="repeatPassword"]]';
        $i = 1;
        while($i<20) {
            $tmp2 = $tmp2.'/following::tr';
            $tmp = $joinForm->byXPath($tmp2);
            $tmp3 = $tmp->byXPath('td[2]');
            if ($tmp3->displayed()) {
                $tmp3 = $tmp3->byXPath('input');
                $tmp3_id = $tmp3->attribute('id');
                $this->byId($tmp3_id)->value($real_name);
                break;
            }
            $i++;
        }

        //------------------GENDER-----------
        $i = 1;
        while($i<20) {
            //$tmp2 = '(//*[@type="radio"])['.$i.']';
            $tmp2 = '(//td[ul/li/input[@type="radio"]])[' . $i . ']';
            $tmp = $joinForm->byXPath($tmp2);

            if ($tmp->displayed()) {
                if($is_male)
                    $tmp = $tmp->byXPath('ul[1]/li[1]/input[1]');
                else
                    $tmp = $tmp->byXPath('ul[1]/li[2]/input[1]');
                $tmp_id = $tmp->attribute('id');

                //$this->echoText($i . ' ' . $tmp2 . '    ' . $tmp_id);
                $this->execute(array(
                    'script' => 'document.getElementById("' . $tmp_id . '").checked=true;',
                    'args' => array()
                ));
                break;
            }
            $i++;
        }

        //------------------DOB-----------
        $i = 1;
        while($i<30) {
            $tmp2 = '(//div[div/select])[' . $i . ']';
            $tmp = $joinForm->byXPath($tmp2);

            if ($tmp->displayed()) {
                //$this->echoText($i . ' ' . $tmp2);

                //DAY
                $tmp3 = $tmp->byXPath('div[1]/select[1]');
                $tmp3_name = $tmp3->attribute('name');
                $this->execute(array(
                    //'script' => 'document.getElementsByName("'.$tmp3_name.'")[0].getElementsByTagName("option")['.$this->TEST_DOB[0].'].selected = "selected"',
                    'script' => 'document.getElementsByName("'.$tmp3_name.'")[0].value = "'.$dob[0].'";',
                    'args' => array()
                ));

                //MONTH
                $tmp3 = $tmp->byXPath('div[2]/select[1]');
                $tmp3_name = $tmp3->attribute('name');
                $this->execute(array(
                    'script' => 'document.getElementsByName("'.$tmp3_name.'")[0].value = "'.$dob[1].'";',
                    'args' => array()
                ));

                //YEAR
                $tmp3 = $tmp->byXPath('div[3]/select[1]');
                $tmp3->byXPath('option[@value="'.$dob[2].'"]')->click();

                break;
            }
            $i++;
        }

        //------------------CAPTCHA, SESSIONS-----------
        $sessionId = $this->CURRENT_SESSIONS->cookie()->get(OW_Session::getInstance()->getName());
        $sessionId = str_replace('%2C',',',$sessionId); // took 2 hours to detect  '/^[-,a-zA-Z0-9]{1,128}$/'
        session_id($sessionId);
        session_start();

        $captchaText = ($_SESSION['securimage_code_value']);
        $joinForm->byName('captchaField')->value($captchaText);
        session_write_close();
        //---------------------------------------------------/
    }


    public function tearDown()
    {
        $config =  OW::getConfig();
        $config->saveConfig('iiscontrolkids', 'kidsAge', $this->KIDS_AGE_BEFORE);
        $config->saveConfig('base', 'mail_smtp_enabled', $this->SMTP_CONFIG);

        try{
            //remove the user from db
            $userDao = BOL_UserDao::getInstance();
            $user = $userDao->findByUserName($this->TEST_USERNAME);
            if($user!=null) {
                $questionDao = BOL_QuestionService::getInstance();
                $questionDao->deleteQuestionDataByUserId($user->getId());
                $userDao->deleteById($user->getId());
            }

            $mailDao = BOL_MailDao::getInstance();
            $mailDao->deleteByRecipientEmail($this->TEST_EMAIL);
        }catch (Exception $ex){}
    }
}