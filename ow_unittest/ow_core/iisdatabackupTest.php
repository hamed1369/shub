<?php

class iisdatabackupTest extends IISTestUtilites
{
    private $TEST_USERNAME = 'adminForLoginTest';
    private $TEST_EMAIL = 'admin@gmail.com';
    private $TEST_CORRECT_PASSWORD = 'asdf@1111';

    private $userService;
    private $user;

    private $questionService;
    private $question;

    protected function setUp()
    {
        $this->setBrowser('firefox');
        $this->setBrowserUrl(OW_URL_HOME);
        $accountType = BOL_QuestionService::getInstance()->getDefaultAccountType()->name;
        IISSecurityProvider::createUser($this->TEST_USERNAME,$this->TEST_EMAIL,$this->TEST_CORRECT_PASSWORD,"1987/3/21","1",$accountType);
        $this->user = BOL_UserService::getInstance()->findByUsername($this->TEST_USERNAME);
    }
    public function setUpPage()
    {
        parent::setUpPage(); // TODO: Change the autogenerated stub
        $this->timeouts()->implicitWait(15000);
    }

    public function testPostDataBackup()
    {
        $CURRENT_SESSIONS = $this->prepareSession();
        $CURRENT_SESSIONS->currentWindow()->maximize();
        $this->url(OW_URL_HOME . "dashboard");

        $sessionId = $CURRENT_SESSIONS->cookie()->get(OW_Session::getInstance()->getName());
        $sessionId = str_replace('%2C', ',', $sessionId); // took 2 hours to detect  '/^[-,a-zA-Z0-9]{1,128}$/'
        $this->sign_in($this->user->getUsername(),$this->TEST_CORRECT_PASSWORD,true,true,$sessionId);
        srand(mktime());
        $number = rand();
        try{
            $this->execute(array(
                'script' => "document.getElementById('div_demo').style.display=\"none\";",
                'args'   => array()
            ));
            try{
                $this->byName('status')->value('selenium status'.$number);
                $this->byName('save')->submit();
                $this->waitUntilElementLoaded('byCssSelector','.ow_newsfeed_string.ow_small.ow_smallmargin');
                $this->moveto( $this->byCssSelector('.ow_newsfeed_string.ow_small.ow_smallmargin'));
                $webdriver = $this;
                $this->moveto( $this->byCssSelector('.ow_newsfeed_content'));
                $this->moveto( $this->byCssSelector('.ow_context_more'));
                $this->moveto( $this->byCssSelector('.newsfeed_remove_btn'));
                $this->byCssSelector('.newsfeed_remove_btn')->click();
                echo $this->acceptAlert();
                $this->waitUntilElementLoaded('byName','status');
                $this->byName('status')->value('selenium status2');
                $this->byName('save')->submit();
                $this->waitUntilElementLoaded('byCssSelector','.ow_button');
                $this->waitUntil(function() use($webdriver){
                    try{
                        $webdriver->byCssSelector('.ow_newsfeed_string.ow_small.ow_smallmargin');
                        return true;
                    }catch (Exception $ex){
                        return null;
                    }

                }, 10000);
                $backupTable = OW::getDbo()->queryForRow('show tables like :tableName', array('tableName' => IISSecurityProvider::getTableBackupName('ow_newsfeed_status')));
                if (!empty($backupTable)) {
                    $queryForGetData = "select * from ".IISSecurityProvider::getTableBackupName('ow_newsfeed_status')." where status = 'selenium status".$number."'";
                    $data = OW::getDbo()->queryForRow($queryForGetData);
                    if($data)
                    {
                        $this->assertTrue(true);
                    }
                    else
                    {
                        $this->assertTrue(false);
                    }

                }
            }catch (Exception $ex){
                echo "____________________________________________________________________";
                echo $ex;
                echo "____________________________________________________________________";
                $this->assertTrue(false);
            }

            $this->assertTrue(true);

        }catch (Exception $ex){
            echo $ex;
            $this->assertTrue(false);
        }

    }


    public function testCommentPostDataBackup()
    {
        $CURRENT_SESSIONS = $this->prepareSession();
        $CURRENT_SESSIONS->currentWindow()->maximize();
        $this->url(OW_URL_HOME . "dashboard");

        $sessionId = $CURRENT_SESSIONS->cookie()->get(OW_Session::getInstance()->getName());
        $sessionId = str_replace('%2C', ',', $sessionId); // took 2 hours to detect  '/^[-,a-zA-Z0-9]{1,128}$/'
        $this->sign_in($this->user->getUsername(),$this->TEST_CORRECT_PASSWORD,true,true,$sessionId);
        srand(mktime());
        $number = rand();
        try{
            $this->execute(array(
                'script' => "document.getElementById('div_demo').style.display=\"none\";",
                'args'   => array()
            ));
            $this->byName('status')->value('selenium status'.$number);
            $this->byName('save')->submit();
            $webdriver = $this;
            $this->waitUntilElementLoaded('byCssSelector','.ow_miniic_comment.newsfeed_comment_btn');
            $this->moveto($this->byCssSelector('.ow_miniic_comment.newsfeed_comment_btn'));
            $this->byCssSelector('.ow_miniic_comment.newsfeed_comment_btn')->click();
            $this->byClassName('comments_fake_autoclick')->value('selenium comment'.$number);
            $this->keys(PHPUnit_Extensions_Selenium2TestCase_Keys::ENTER);
            $this->waitUntilElementLoaded('byClassName','ow_comments_item_header');

            $this->moveto( $this->byClassName('ow_comments_item_header'));
            $this->moveto($this->byCssSelector('.cnx_action'));
            $this->moveto($this->byCssSelector('.ow_comments_context_tooltip'));
            $this->byClassName('ow_comments_context_tooltip')->click();
            $this->acceptAlert();
            $this->waitUntil(function() use($webdriver){
                try{
                    $count = $webdriver->byClassName('newsfeed_counter_comments')->text();
                    if($count==0) {
                        return true;
                    }
                }catch (Exception $ex){
                    echo "____________________________________________________________________";
                    echo $ex;
                    echo "____________________________________________________________________";
                    $this->assertTrue(false);
                }

            }, 5000);
            $backupTable = OW::getDbo()->queryForRow('show tables like :tableName', array('tableName' => IISSecurityProvider::getTableBackupName('ow_base_comment')));
            if (!empty($backupTable)) {
                $queryForGetData = "select * from `iisbckp_ow_base_comment` where message ='selenium comment".$number."'";
                $data = OW::getDbo()->queryForRow($queryForGetData);
                if($data)
                {
                    $this->assertTrue(true);
                }
                else
                {
                    $this->assertTrue(false);
                }

            }
            $this->assertTrue(true);

        }catch (Exception $ex){
            echo "____________________________________________________________________";
            echo $ex;
            if (getenv("SNAPSHOT_DIR"))
                file_put_contents(getenv("SNAPSHOT_DIR") . 'iisdatabackupTest.testCommentPost' . '.png', $this->currentScreenshot());
            echo "____________________________________________________________________";
            $this->assertTrue(false);
        }
    }


    public function tearDown()
    {
        $questionDao = BOL_QuestionService::getInstance();
        $questionDao->deleteQuestionDataByUserId($this->user->getId());
        $userDao = BOL_UserDao::getInstance();
        $userDao->deleteById($this->user->getId());
    }
}