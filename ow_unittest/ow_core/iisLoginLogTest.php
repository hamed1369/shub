<?php

class iisLoginLogTest extends IISTestUtilites
{
    private $TEST_USERNAME = 'adminForLoginTest';
    private $TEST_EMAIL = 'admin@gmail.com';
    private $TEST_CORRECT_PASSWORD = '12345';

    private $userService;
    private $user;

    private $questionService;
    private $question;

    protected function setUp()
    {
        $this->setBrowser('firefox');
        $this->setBrowserUrl(OW_URL_HOME);
        $accountType = BOL_QuestionService::getInstance()->getDefaultAccountType()->name;
        IISSecurityProvider::createUser($this->TEST_USERNAME,$this->TEST_EMAIL,$this->TEST_CORRECT_PASSWORD,"1987/3/21","1",$accountType);
        $this->user = BOL_UserService::getInstance()->findByUsername($this->TEST_USERNAME);
    }
    public function setUpPage()
    {
        parent::setUpPage(); // TODO: Change the autogenerated stub
        $this->timeouts()->implicitWait(15000);
    }

    public function testLoginLog()
    {
        $this->prepareSession()->currentWindow()->maximize();
        $this->url(OW_URL_HOME.'sign-in');
        //$this->byClassName('ow_signin_label')->click();
        $this->byName('identity')->clear();
        $this->byName('identity')->value($this->TEST_USERNAME);
        $this->byName('password')->clear();
        $this->byName('password')->value($this->TEST_CORRECT_PASSWORD);
        $t = time()-50;
        $this->byName('sign-in')->submit();
        srand(mktime());
        $number = rand();
       // sleep(5);
            try{
                $backupTable = OW::getDbo()->queryForRow('show tables like :tableName', array('tableName' => 'ow_iisuserlogin_login_details'));
                if (!empty($backupTable)) {
                    $queryForGetData = "select * from `ow_iisuserlogin_login_details` where userId =".$this->user->getId()." and time>=".$t;
                    $data = OW::getDbo()->queryForRow($queryForGetData);
                    if($data)
                    {
                        $this->assertTrue(true);
                    }
                    else
                    {
                        $this->assertTrue(false);
                    }
                }
                else
                {
                    $this->assertTrue(false);
                }
            }catch (Exception $ex){
                echo "____________________________________________________________________";
                echo $ex;
                echo "____________________________________________________________________";
                $this->assertTrue(false);
            }
    }

    public function tearDown()
    {
        $questionDao = BOL_QuestionService::getInstance();
        $questionDao->deleteQuestionDataByUserId($this->user->getId());
        $userDao = BOL_UserDao::getInstance();
        $userDao->deleteById($this->user->getId());
    }
}